% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/alpha_beta_NGD.R
\name{alpha_beta_NGD}
\alias{alpha_beta_NGD}
\title{(α, β)-Normalized Gradient Descent (NGD)}
\usage{
alpha_beta_NGD(initial_point, alpha, beta, D, tolerance = 0.1, f)
}
\arguments{
\item{initial_point}{A numeric vector representing the initial starting point in \eqn{R^d}.}

\item{alpha}{A numeric value representing the strong convexity parameter (\eqn{α}).}

\item{beta}{A numeric value representing the smoothness parameter (\eqn{β}).}

\item{D}{A numeric value representing the diameter of the search space.}

\item{tolerance}{A numeric value representing the desired accuracy for convergence. Default is 0.1.}

\item{f}{A convex function representing the objective function to be minimized. This function
must take a numeric vector as input and return a numeric value.}
}
\value{
A numeric vector representing the approximate optimal point after performing
multiple phases of gradient descent. The returned point reduces the initial
distance to the optimal point within the specified \code{tolerance}.
}
\description{
This algorithm performs gradient descent on an \eqn{α}-strongly convex and \eqn{β}-smooth function.
It iteratively refines the solution over multiple phases, leveraging both the strong convexity
and smoothness properties to achieve faster convergence.
}
\details{
The (α, β)-Normalized Gradient Descent (NGD) algorithm is designed for functions that are
both \eqn{α}-strongly convex and \eqn{β}-smooth. The algorithm progresses over several phases, where
each phase has its own step size, perturbation parameter, and query budget. The algorithm
aims to reduce the initial distance from the optimal point to within a specified \code{tolerance}.

This implementation uses \code{beta_NGD} for the optimization steps within each phase.
It assumes the provided objective function \code{f} satisfies the strong convexity
and smoothness conditions for accurate results.
}
\examples{
# Define the objective function
f <- function(x) sum(x^2)  # quadratic function

# Set parameters
initial_point <- c(1, 1)
alpha <- 1
beta <- 1.0
D <- 2
tolerance <- 0.01

# Run the algorithm
result <- alpha_beta_NGD(initial_point, alpha, beta, D, tolerance, f)
print(result)
}
